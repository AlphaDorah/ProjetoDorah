"""
This type stub file was generated by pyright.
"""

from googleapiclient import _helpers as util

"""
This type stub file was generated by pyright.
"""
__author__ = ...
class Schemas:
    """Schemas for an API."""
    def __init__(self, discovery) -> None:
        """Constructor.

        Args:
          discovery: object, Deserialized discovery document from which we pull
            out the named schema.
        """
        ...
    
    def prettyPrintByName(self, name):
        """Get pretty printed object prototype from the schema name.

        Args:
          name: string, Name of schema in the discovery document.

        Returns:
          string, A string that contains a prototype object with
            comments that conforms to the given schema.
        """
        ...
    
    def prettyPrintSchema(self, schema):
        """Get pretty printed object prototype of schema.

        Args:
          schema: object, Parsed JSON schema.

        Returns:
          string, A string that contains a prototype object with
            comments that conforms to the given schema.
        """
        ...
    
    def get(self, name, default=...):
        """Get deserialized JSON schema from the schema name.

        Args:
          name: string, Schema name.
          default: object, return value if name not found.
        """
        ...
    


class _SchemaToStruct:
    """Convert schema to a prototype object."""
    @util.positional(3)
    def __init__(self, schema, seen, dent=...) -> None:
        """Constructor.

        Args:
          schema: object, Parsed JSON schema.
          seen: list, List of names of schema already seen while parsing. Used to
            handle recursive definitions.
          dent: int, Initial indentation depth.
        """
        ...
    
    def emit(self, text):
        """Add text as a line to the output.

        Args:
          text: string, Text to output.
        """
        ...
    
    def emitBegin(self, text):
        """Add text to the output, but with no line terminator.

        Args:
          text: string, Text to output.
        """
        ...
    
    def emitEnd(self, text, comment):
        """Add text and comment to the output with line terminator.

        Args:
          text: string, Text to output.
          comment: string, Python comment.
        """
        ...
    
    def indent(self):
        """Increase indentation level."""
        ...
    
    def undent(self):
        """Decrease indentation level."""
        ...
    
    def to_str(self, from_cache):
        """Prototype object based on the schema, in Python code with comments.

        Args:
          from_cache: callable(name, seen), Callable that retrieves an object
             prototype for a schema with the given name. Seen is a list of schema
             names already seen as we recursively descend the schema definition.

        Returns:
          Prototype object based on the schema, in Python code with comments.
          The lines of the code will all be properly indented.
        """
        ...
    


